import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE"
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.3'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'cloudfoundry'
apply plugin: 'license'

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/release' }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.4.3"
    compile "org.codehaus.gpars:gpars:1.2.1"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-social-twitter"
    compile "org.mongodb:mongo-java-driver:3.2.2"
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'junit:junit:4.11'
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.objenesis:objenesis:2.1'
    testCompile 'info.cukes:cucumber-junit:1.1.8'
    testCompile 'info.cukes:cucumber-groovy:1.1.8'
    testCompile 'com.github.groovy-wslite:groovy-wslite:0.8.0'
}

test.testLogging.exceptionFormat = 'full'

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/funtest/groovy')
        resources.srcDir     file('src/funtest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

processResources {
    filter ReplaceTokens, tokens: ["application.version": project.version]
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check.dependsOn functionalTest

jar.archiveName = "application.jar"

cloudfoundry {
    file = file("${projectDir}/build/libs/${project.name}-${project.version}.jar")
    buildpack = "https://github.com/cloudfoundry/java-buildpack"
    target = 'https://api.run.pivotal.io'
    organization = envVariableAsGlobal("CF_ORG", true)
    username = envVariableAsGlobal("CF_USERNAME", true)
    password = envVariableAsGlobal("CF_PASSWORD", true)
    space = envVariableAsGlobal("CF_SPACE", false)
    application = envVariableAsGlobal("CF_APP", false)
    domain = envVariableAsGlobal("CF_DOMAIN", true)
    host = envVariableAsGlobal("CF_HOST", false)
    uri = envVariableAsGlobal("CF_URI", false)
    env = [
        MONGO_HOST: envVariableAsGlobal("CF_MONGO_HOST", false),
        MONGO_PORT: envVariableAsGlobal("CF_MONGO_PORT", false),
        MONGO_DB_NAME: envVariableAsGlobal("CF_MONGO_DB_NAME", false),
        MONGO_USERNAME: envVariableAsGlobal("CF_MONGO_USERNAME", false),
        MONGO_PASSWORD: envVariableAsGlobal("CF_MONGO_PASSWORD", false),
        TWITTER_CONSUMER_KEY: envVariableAsGlobal("CF_TWITTER_CONSUMER_KEY", false),
        TWITTER_CONSUMER_SECRET: envVariableAsGlobal("CF_TWITTER_CONSUMER_SECRET", false),
        TWITTER_ACCESS_TOKEN: envVariableAsGlobal("CF_TWITTER_ACCESS_TOKEN", false),
        TWITTER_ACCESS_TOKEN_SECRET: envVariableAsGlobal("CF_TWITTER_ACCESS_TOKEN_SECRET", false),
        ACCESS_TOKEN: envVariableAsGlobal("CF_ACCESS_TOKEN", false),
        ADMIN_HEADER: envVariableAsGlobal("CF_ADMIN_HEADER", false)
    ]
}

def envVariableAsGlobal(String envVar, boolean global) {
    def env = global ? "" : determineEnvironment()
    System.getenv("${envVar}${env}") ?: 'invalid'
}

def determineEnvironment() {
    hasProperty("env") ? "_${env.toUpperCase()}" : '_LOCAL'
}

license {
	header file('gradle/HEADER')
	strictCheck true
}
